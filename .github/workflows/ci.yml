name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays at 6am UTC

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run ruff linting
      run: ruff check graph_rag --output-format=github

    - name: Check code formatting
      run: ruff format --check graph_rag

    - name: Run type checking
      run: mypy graph_rag --ignore-missing-imports

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.10'
    
    services:
      memgraph:
        image: memgraph/memgraph:latest
        ports:
          - 7687:7687
        options: --health-cmd "echo 'SELECT 1;' | mgconsole" --health-interval 10s --health-timeout 5s --health-retries 5
        # Only run Memgraph on Linux
        if: matrix.os == 'ubuntu-latest'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Install optional dependencies for full tests
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        pip install -e ".[all]"

    - name: Wait for Memgraph (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        timeout 60s bash -c 'until nc -z localhost 7687; do sleep 1; done'

    - name: Run unit tests
      run: |
        pytest -m "not integration" -v --tb=short
      env:
        SKIP_SPACY_IMPORT: '1'
        GRAPH_RAG_EMBEDDING_PROVIDER: 'mock'
        GRAPH_RAG_LLM_TYPE: 'mock'
        PYTHONPATH: .

    - name: Run integration tests (Linux with Memgraph only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pytest -m "integration" -v --tb=short
      env:
        SYNAPSE_API_BASE_URL: http://localhost:8000
        MEMGRAPH_URI: bolt://localhost:7687
        PYTHONPATH: .

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]

    - name: Run safety check
      continue-on-error: true
      run: |
        safety check --json --output safety-report.json
        if [ -f safety-report.json ]; then cat safety-report.json; fi

    - name: Run bandit security scan
      continue-on-error: true
      run: |
        bandit -r graph_rag -f json -o bandit-report.json
        if [ -f bandit-report.json ]; then cat bandit-report.json; fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  mcp-integration:
    name: MCP Integration Test
    runs-on: ubuntu-latest
    
    services:
      memgraph:
        image: memgraph/memgraph:latest
        ports:
          - 7687:7687
        options: --health-cmd "echo 'SELECT 1;' | mgconsole" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies with MCP
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,mcp]"

    - name: Wait for Memgraph
      run: |
        timeout 60s bash -c 'until nc -z localhost 7687; do sleep 1; done'

    - name: Start API server in background
      run: |
        cd /tmp && python -m uvicorn graph_rag.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 15
      env:
        MEMGRAPH_URI: bolt://localhost:7687

    - name: Test MCP health check
      run: |
        synapse mcp health
      env:
        SYNAPSE_API_BASE_URL: http://localhost:8000

    - name: Test MCP tools functionality
      run: |
        synapse mcp test --tool search || echo "Search test failed, API may not be ready"
        synapse mcp test --tool query_answer || echo "Query test failed, API may not be ready"
      env:
        SYNAPSE_API_BASE_URL: http://localhost:8000

  build-test:
    name: Build Package Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: Check manifest
      run: check-manifest

    - name: Build package
      run: python -m build

    - name: Check distribution
      run: python -m twine check dist/*

    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        synapse --version
        synapse --help

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-test
        path: dist/