name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      memgraph:
        image: memgraph/memgraph:latest
        ports:
          - 7687:7687
        options: --health-cmd "echo 'SELECT 1;' | mgconsole" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"

    - name: Wait for Memgraph
      run: |
        timeout 60s bash -c 'until nc -z localhost 7687; do sleep 1; done'

    - name: Run linting
      run: |
        ruff check .
        ruff format --check .

    - name: Run type checking
      run: |
        mypy graph_rag --ignore-missing-imports

    - name: Run tests
      run: |
        pytest tests/ -v --cov=graph_rag --cov-report=xml --cov-report=html
      env:
        SYNAPSE_API_BASE_URL: http://localhost:8000
        MEMGRAPH_URI: bolt://localhost:7687

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        cat safety-report.json

    - name: Run bandit security scan
      run: |
        bandit -r graph_rag -f json -o bandit-report.json || true
        cat bandit-report.json

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml

    - name: Build package
      run: |
        python -m build

    - name: Check distribution
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: release
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    environment: test-release
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true

    - name: Test installation from TestPyPI
      run: |
        sleep 30  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ synapse-graph-rag
        synapse --version
        synapse --help

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        VERSION="${GITHUB_REF#refs/tags/}"
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract changelog section for this version
        VERSION="${{ steps.version.outputs.version }}"
        if grep -q "## \[$VERSION\]" CHANGELOG.md; then
          awk "/## \[$VERSION\]/,/## \[/{if(/## \[/ && !/## \[$VERSION\]/) exit; print}" CHANGELOG.md | head -n -1 > release_notes.md
        else
          echo "Release ${{ steps.version.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md
          echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body_path: release_notes.md
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: macos-latest
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
    
    steps:
    - name: Extract version from tag
      id: version
      run: |
        VERSION="${GITHUB_REF#refs/tags/}"
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT

    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: synapse-graph-rag
        tag: ${{ steps.version.outputs.tag }}
        revision: ${{ github.sha }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always()
    
    steps:
    - name: Extract version from tag
      id: version
      run: |
        VERSION="${GITHUB_REF#refs/tags/}"
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT

    - name: Notify success
      if: needs.create-release.result == 'success' && needs.publish-pypi.result == 'success'
      run: |
        echo "✅ Successfully released Synapse GraphRAG ${{ steps.version.outputs.tag }}"
        echo "📦 Package available at: https://pypi.org/project/synapse-graph-rag/${{ steps.version.outputs.version }}/"
        echo "🎉 Release page: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"

    - name: Notify failure
      if: needs.create-release.result == 'failure' || needs.publish-pypi.result == 'failure'
      run: |
        echo "❌ Release failed for Synapse GraphRAG ${{ steps.version.outputs.tag }}"
        echo "Check the workflow logs for details."
        exit 1