- **Singleton Management:** When testing API interactions involving background tasks or services initialized during lifespan, ensure tests retrieve the *actual singleton instance* used by the application (likely from `dependencies._singletons`), not just a potentially different instance created during test setup (like one attached to `app.state`). Use fixtures to resolve the correct dependency.
- **Mocking Complex Objects:** When asserting mock calls with Pydantic objects, especially those with dynamic IDs, prefer checking `call_count` and inspecting specific arguments via `mock.call_args` or `mock.await_args` rather than relying on direct object comparison (`mock.assert_called_with(obj)`), which can be brittle.
- **Memgraph Client Properties:** Access properties of nodes returned by `mgclient` using the `.properties` attribute (e.g., `node.properties['id']`), not direct dictionary access.
- **Efficiency - Avoid Redundant Computation:** Before performing potentially expensive operations (like generating embeddings), check if the required data already exists and is valid. If so, reuse the existing data instead of recomputing it. Example: In `SimpleVectorStore.ingest_chunks`, check `chunk.embedding` before calling the embedding service. 