[project]
name = "graph-rag-mcp"
version = "0.1.0"
description = "Graph-based RAG implementation with Memgraph"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "neo4j>=5.13.0",
    "pydantic>=2.4.2",
    "pydantic-settings",
    "tenacity>=8.2.3",
    "python-dotenv>=1.0.0",
    "nltk>=3.8.1",
    "pymgclient>=1.3.0",
    "httpx>=0.25.0",
    "sentence-transformers",
]
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock",
    "ruff>=0.1.6",
    "uv>=0.1.13",
    "spacy>=3.0.0",
    "gqlalchemy",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["graph_rag"]

[tool.ruff]
line-length = 88
target-version = "py39"
select = ["E", "F", "B", "I", "N", "UP", "PL", "RUF"]
ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=graph_rag --cov-report=term-missing"
markers = [
    "integration: mark test as integration test",
]

[tool.coverage.run]
source = ["graph_rag"]
omit = [
    "tests/*",
    "graph_rag/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[project.scripts]
# graph-rag = "graph_rag.cli.main:app" # Old entry point
synapse = "graph_rag.cli.main:app" # New entry point 
