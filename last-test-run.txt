============================= test session starts ==============================
platform darwin -- Python 3.12.7, pytest-8.3.5, pluggy-1.5.0 -- /Users/bogdan/til/graph-rag-mcp/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/bogdan/til/graph-rag-mcp
configfile: pytest.ini
plugins: anyio-4.9.0, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
collecting ... collected 239 items / 1 skipped

pymgclient/test/test_connection.py::test_connect_args_validation PASSED  [  0%]
pymgclient/test/test_connection.py::test_connect_insecure_success SKIPPED [  0%]
pymgclient/test/test_connection.py::test_connection_secure_fail SKIPPED  [  1%]
pymgclient/test/test_connection.py::test_connection_secure_success SKIPPED [  1%]
pymgclient/test/test_connection.py::test_connection_close SKIPPED (M...) [  2%]
pymgclient/test/test_connection.py::test_connection_close_lazy SKIPPED   [  2%]
pymgclient/test/test_connection.py::test_autocommit_regular SKIPPED      [  2%]
pymgclient/test/test_connection.py::test_autocommit_lazy SKIPPED (ME...) [  3%]
pymgclient/test/test_connection.py::test_commit SKIPPED (MEMGRAPH_HO...) [  3%]
pymgclient/test/test_connection.py::test_rollback SKIPPED (MEMGRAPH_...) [  4%]
pymgclient/test/test_connection.py::test_close_doesnt_commit SKIPPED     [  4%]
pymgclient/test/test_connection.py::test_commit_rollback_lazy SKIPPED    [  5%]
pymgclient/test/test_connection.py::test_autocommit_failure SKIPPED      [  5%]
pymgclient/test/test_cursor.py::test_cursor_visibility SKIPPED (MEMG...) [  5%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_execute_closed_connection SKIPPED [  6%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_close SKIPPED [  6%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_fetchone SKIPPED [  7%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_fetchmany SKIPPED [  7%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_fetchall SKIPPED [  7%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_multiple_queries SKIPPED [  8%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_syntax_error SKIPPED [  8%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_runtime_error SKIPPED [  9%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_description SKIPPED [  9%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_fetchone_without_result SKIPPED [ 10%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_fetchmany_without_result SKIPPED [ 10%]
pymgclient/test/test_cursor.py::TestCursorInRegularConnection::test_cursor_result_ref_counts SKIPPED [ 10%]
pymgclient/test/test_cursor.py::TestCursorInLazyConnection::test_lazy_cant_execute_twice SKIPPED [ 11%]
pymgclient/test/test_cursor.py::TestCursorInLazyConnection::test_lazy_cant_execute_during_execution SKIPPED [ 11%]
pymgclient/test/test_cursor.py::TestCursorInLazyConnection::test_lazy_cant_close_during_execution SKIPPED [ 12%]
pymgclient/test/test_cursor.py::TestCursorInLazyConnection::test_lazy_result_available_after_fetch SKIPPED [ 12%]
pymgclient/test/test_glue.py::test_none SKIPPED (MEMGRAPH_HOST is un...) [ 12%]
pymgclient/test/test_glue.py::test_bool SKIPPED (MEMGRAPH_HOST is un...) [ 13%]
pymgclient/test/test_glue.py::test_integer SKIPPED (MEMGRAPH_HOST is...) [ 13%]
pymgclient/test/test_glue.py::test_float SKIPPED (MEMGRAPH_HOST is u...) [ 14%]
pymgclient/test/test_glue.py::test_string SKIPPED (MEMGRAPH_HOST is ...) [ 14%]
pymgclient/test/test_glue.py::test_list SKIPPED (MEMGRAPH_HOST is un...) [ 15%]
pymgclient/test/test_glue.py::test_map SKIPPED (MEMGRAPH_HOST is uns...) [ 15%]
pymgclient/test/test_glue.py::test_node SKIPPED (MEMGRAPH_HOST is un...) [ 15%]
pymgclient/test/test_glue.py::test_relationship SKIPPED (MEMGRAPH_HO...) [ 16%]
pymgclient/test/test_glue.py::test_path SKIPPED (MEMGRAPH_HOST is un...) [ 16%]
pymgclient/test/test_glue.py::test_tuple SKIPPED (MEMGRAPH_HOST is u...) [ 17%]
pymgclient/test/test_glue.py::test_time SKIPPED (MEMGRAPH_HOST is un...) [ 17%]
pymgclient/test/test_glue.py::test_date SKIPPED (MEMGRAPH_HOST is un...) [ 17%]
pymgclient/test/test_glue.py::test_datetime SKIPPED (MEMGRAPH_HOST i...) [ 18%]
pymgclient/test/test_glue.py::test_duration SKIPPED (MEMGRAPH_HOST i...) [ 18%]
pymgclient/test/test_types.py::test_node PASSED                          [ 19%]
pymgclient/test/test_types.py::test_relationship PASSED                  [ 19%]
pymgclient/test/test_types.py::test_path PASSED                          [ 20%]
tests/api/test_documents.py::test_delete_document_endpoint_success PASSED [ 20%]
tests/api/test_documents.py::test_delete_document_endpoint_not_found PASSED [ 20%]
tests/api/test_documents.py::test_delete_document_endpoint_repository_error PASSED [ 21%]
tests/api/test_documents.py::test_patch_document_metadata_success PASSED [ 21%]
tests/api/test_documents.py::test_patch_document_no_body PASSED          [ 22%]
tests/api/test_documents.py::test_patch_document_invalid_field PASSED    [ 22%]
tests/api/test_documents.py::test_patch_document_not_found PASSED        [ 23%]
tests/api/test_documents.py::test_patch_document_repository_error PASSED [ 23%]
tests/api/test_endpoints.py::test_health_check PASSED                    [ 23%]
tests/api/test_endpoints.py::test_create_document PASSED                 [ 24%]
tests/api/test_endpoints.py::test_get_document PASSED                    [ 24%]
tests/api/test_ingestion.py::test_ingest_document_endpoint PASSED        [ 25%]
tests/api/test_ingestion.py::test_ingest_document_handles_endpoint_error PASSED [ 25%]
tests/api/test_ingestion_api.py::test_ingest_document_empty_content PASSED [ 25%]
tests/api/test_ingestion_api.py::test_ingest_document_missing_content PASSED [ 26%]
tests/api/test_ingestion_api.py::test_ingest_document_invalid_metadata_type PASSED [ 26%]
tests/api/test_ingestion_api.py::test_background_processing_success PASSED [ 27%]
tests/api/test_ingestion_api.py::test_ingest_large_document PASSED       [ 27%]
tests/api/test_ingestion_api.py::test_ingest_document_with_special_chars PASSED [ 28%]
tests/api/test_ingestion_api.py::test_concurrent_ingestion PASSED        [ 28%]
tests/api/test_main_endpoints.py::test_read_root PASSED                  [ 28%]
tests/api/test_main_endpoints.py::test_health_check_main PASSED          [ 29%]
tests/api/test_query_api.py::test_query_success PASSED                   [ 29%]
tests/api/test_query_api.py::test_query_success_with_graph_context PASSED [ 30%]
tests/api/test_query_api.py::test_query_engine_error PASSED              [ 30%]
tests/api/test_query_api.py::test_query_invalid_request_missing_text PASSED [ 30%]
tests/api/test_query_api.py::test_query_invalid_request_bad_k_type PASSED [ 31%]
tests/api/test_query_api.py::test_query_missing_query_text PASSED        [ 31%]
tests/api/test_query_api.py::test_query_no_entities PASSED               [ 32%]
tests/api/test_search.py::test_unified_search_keyword PASSED             [ 32%]
tests/api/test_search.py::test_unified_search_vector PASSED              [ 33%]
tests/api/test_search.py::test_unified_search_engine_error PASSED        [ 33%]
tests/api/test_search.py::test_unified_search_invalid_search_type PASSED [ 33%]
tests/api/test_search.py::test_unified_search_invalid_limit PASSED       [ 34%]
tests/api/test_search_ingestion.py::test_ingest_document_success PASSED  [ 34%]
tests/api/test_search_ingestion.py::test_ingest_document_empty_content PASSED [ 35%]
tests/api/test_search_ingestion.py::test_search_batch_success PASSED     [ 35%]
tests/api/test_search_ingestion.py::test_search_stream_success PASSED    [ 35%]
tests/api/test_search_ingestion.py::test_search_no_results PASSED        [ 36%]
tests/api/test_search_ingestion.py::test_search_invalid_type PASSED      [ 36%]
tests/cli/test_cli_commands.py::test_ingest_document_file_success PASSED [ 37%]
tests/cli/test_cli_commands.py::test_ingest_document_no_input PASSED     [ 37%]
tests/cli/test_cli_commands.py::test_ingest_document_invalid_metadata PASSED [ 38%]
tests/cli/test_cli_commands.py::test_search_batch_success PASSED         [ 38%]
tests/cli/test_cli_commands.py::test_search_stream_success PASSED        [ 38%]
tests/cli/test_cli_commands.py::test_admin_health_success PASSED         [ 39%]
tests/cli/test_cli_commands.py::test_admin_health_unhealthy PASSED       [ 39%]
tests/cli/test_cli_commands.py::test_admin_health_api_error PASSED       [ 40%]
tests/cli/test_cli_ingest.py::test_ingest_file_success PASSED            [ 40%]
tests/cli/test_cli_ingest.py::test_ingest_missing_file_argument PASSED   [ 41%]
tests/cli/test_cli_ingest.py::test_ingest_file_not_found PASSED          [ 41%]
tests/cli/test_cli_ingest.py::test_ingest_invalid_metadata_json SKIPPED  [ 41%]
tests/cli/test_cli_ingest.py::test_cli_large_file_handling PASSED        [ 42%]
tests/cli/test_cli_ingest.py::test_cli_special_chars_handling PASSED     [ 42%]
tests/cli/test_cli_ingest.py::test_ingest_processing_error PASSED        [ 43%]
tests/config/test_settings.py::test_settings_load_defaults PASSED        [ 43%]
tests/config/test_settings.py::test_settings_load_from_env_vars PASSED   [ 43%]
tests/config/test_settings.py::test_settings_memgraph_uri_override_from_env PASSED [ 44%]
tests/config/test_settings.py::test_settings_load_from_env_file PASSED   [ 44%]
tests/config/test_settings.py::test_settings_memgraph_uri_override PASSED [ 45%]
tests/core/test_debug_tools.py::test_capture_system_state SKIPPED (A...) [ 45%]
tests/core/test_debug_tools.py::test_analyze_query_performance SKIPPED   [ 46%]
tests/core/test_debug_tools.py::test_validate_graph_structure SKIPPED    [ 46%]
tests/core/test_debug_tools.py::test_create_debug_context SKIPPED (S...) [ 46%]
tests/core/test_debug_tools.py::test_save_and_load_debug_context SKIPPED [ 47%]
tests/core/test_debug_tools.py::test_capture_system_state_integration SKIPPED [ 47%]
tests/core/test_debug_tools.py::test_analyze_query_performance_integration SKIPPED [ 48%]
tests/core/test_debug_tools.py::test_validate_graph_structure_integration SKIPPED [ 48%]
tests/core/test_document_processor.py::test_sentence_splitter_basic PASSED [ 48%]
tests/core/test_document_processor.py::test_sentence_splitter_empty_doc PASSED [ 49%]
tests/core/test_document_processor.py::test_sentence_splitter_single_sentence PASSED [ 49%]
tests/core/test_document_processor.py::test_sentence_splitter_empty_doc_preserves_metadata PASSED [ 50%]
tests/core/test_document_processor.py::test_sentence_splitter_preserves_metadata PASSED [ 50%]
tests/core/test_document_processor_async.py::test_minimal_async PASSED   [ 51%]
tests/core/test_document_processor_async.py::test_simple_chunking_by_paragraph PASSED [ 51%]
tests/core/test_document_processor_async.py::test_simple_chunking_fixed_tokens PASSED [ 51%]
tests/core/test_document_processor_async.py::test_simple_chunking_invalid_strategy PASSED [ 52%]
tests/core/test_document_processor_async.py::test_simple_chunking_empty_doc PASSED [ 52%]
tests/core/test_document_processor_async.py::test_simple_chunking_whitespace_doc PASSED [ 53%]
tests/core/test_entity_extractor.py::test_spacy_extracts_entities PASSED [ 53%]
tests/core/test_entity_extractor.py::test_spacy_extract_no_entities PASSED [ 53%]
tests/core/test_entity_extractor.py::test_spacy_extract_empty_text PASSED [ 54%]
tests/core/test_entity_extractor.py::test_mock_extractor_finds_entities PASSED [ 54%]
tests/core/test_entity_extractor.py::test_mock_extractor_no_entities PASSED [ 55%]
tests/core/test_entity_extractor.py::test_mock_extractor_empty_document PASSED [ 55%]
tests/core/test_graph_debugging_scenarios.py::test_debug_orphaned_nodes SKIPPED [ 56%]
tests/core/test_graph_debugging_scenarios.py::test_debug_query_performance SKIPPED [ 56%]
tests/core/test_graph_debugging_scenarios.py::test_debug_relationship_patterns SKIPPED [ 56%]
tests/core/test_graph_debugging_scenarios.py::test_debug_transaction_issues SKIPPED [ 57%]
tests/core/test_graph_debugging_scenarios.py::test_debug_index_issues SKIPPED [ 57%]
tests/core/test_graph_rag_engine.py::test_process_and_store_document_flow SKIPPED [ 58%]
tests/core/test_graph_rag_engine.py::test_retrieve_context_vector PASSED [ 58%]
tests/core/test_graph_rag_engine.py::test_simple_engine_query_uses_stores PASSED [ 58%]
tests/core/test_graph_rag_engine.py::test_engine_initialization PASSED   [ 59%]
tests/core/test_graph_rag_engine.py::test_engine_requires_stores PASSED  [ 59%]
tests/core/test_graph_rag_engine.py::test_engine_query_calls_vector_store SKIPPED [ 60%]
tests/core/test_graph_rag_engine.py::test_engine_query_no_results SKIPPED [ 60%]
tests/core/test_graph_rag_engine.py::test_engine_query_handles_vector_store_error SKIPPED [ 61%]
tests/core/test_graph_rag_engine.py::test_engine_query_retrieves_graph_context SKIPPED [ 61%]
tests/core/test_graph_rag_engine.py::test_engine_query_graph_context_disabled SKIPPED [ 61%]
tests/core/test_graph_rag_engine.py::test_engine_query_no_entities_found_in_graph SKIPPED [ 62%]
tests/core/test_knowledge_graph_builder.py::test_add_document PASSED     [ 62%]
tests/core/test_knowledge_graph_builder.py::test_add_chunk PASSED        [ 63%]
tests/core/test_knowledge_graph_builder.py::test_add_entity PASSED       [ 63%]
tests/core/test_knowledge_graph_builder.py::test_add_relationship PASSED [ 64%]
tests/core/test_knowledge_graph_builder.py::test_link_chunk_to_entities PASSED [ 64%]
tests/core/test_knowledge_graph_builder.py::test_add_duplicate_document PASSED [ 64%]
tests/core/test_knowledge_graph_builder.py::test_builder_adds_entities_and_relationships PASSED [ 65%]
tests/core/test_knowledge_graph_builder.py::test_builder_no_data_does_nothing PASSED [ 65%]
tests/core/test_knowledge_graph_builder.py::test_builder_requires_graph_store PASSED [ 66%]
tests/core/test_senior_debug_protocol.py::test_observe_failure PASSED    [ 66%]
tests/core/test_senior_debug_protocol.py::test_analyze_test_case PASSED  [ 66%]
tests/core/test_senior_debug_protocol.py::test_question_assumptions PASSED [ 67%]
tests/core/test_senior_debug_protocol.py::test_trace_execution_path PASSED [ 67%]
tests/core/test_senior_debug_protocol.py::test_identify_implementation_gaps PASSED [ 68%]
tests/core/test_senior_debug_protocol.py::test_create_investigation PASSED [ 68%]
tests/core/test_senior_debug_protocol.py::test_generate_hypotheses PASSED [ 69%]
tests/core/test_senior_debug_protocol.py::test_verify_hypothesis PASSED  [ 69%]
tests/core/test_senior_debug_protocol.py::test_resolve_issue PASSED      [ 69%]
tests/core/test_senior_debug_protocol.py::test_save_and_load_investigation PASSED [ 70%]
tests/core/test_senior_debug_protocol.py::test_handle_persistent_error PASSED [ 70%]
tests/data_stores/test_memgraph_store.py::test_unit_connect_success PASSED [ 71%]
tests/data_stores/test_memgraph_store.py::test_unit_add_node PASSED      [ 71%]
tests/data_stores/test_memgraph_store.py::test_unit_add_relationship PASSED [ 71%]
tests/data_stores/test_memgraph_store.py::test_integration_connection SKIPPED [ 72%]
tests/data_stores/test_memgraph_store.py::test_integration_add_and_get_node SKIPPED [ 72%]
tests/data_stores/test_memgraph_store.py::test_integration_add_relationship SKIPPED [ 73%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_connection_management FAILED [ 73%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_add_get_entity FAILED [ 74%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_document_as_entity FAILED [ 74%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_chunk_as_entity FAILED [ 74%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_entity_interface_operations FAILED [ 75%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_relationship_operations FAILED [ 75%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_bulk_operations FAILED [ 76%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_error_handling FAILED [ 76%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_neighbor_operations FAILED [ 76%]
tests/infrastructure/graph_stores/test_memgraph_store.py::test_property_search FAILED [ 77%]
tests/infrastructure/repositories/test_graph_repository.py::test_delete_document SKIPPED [ 77%]
tests/infrastructure/repositories/test_graph_repository.py::test_delete_nonexistent_document SKIPPED [ 78%]
tests/infrastructure/repositories/test_graph_repository.py::test_update_document_metadata SKIPPED [ 78%]
tests/infrastructure/repositories/test_graph_repository.py::test_update_document_nonexistent SKIPPED [ 79%]
tests/infrastructure/repositories/test_graph_repository.py::test_update_document_no_properties SKIPPED [ 79%]
tests/integration/test_e2e.py::test_ingest_and_keyword_search FAILED     [ 79%]
tests/integration/test_e2e.py::test_ingest_and_vector_search FAILED      [ 80%]
tests/integration/test_e2e.py::test_search_nonexistent_term FAILED       [ 80%]
tests/integration/test_e2e.py::test_ingest_and_delete FAILED             [ 81%]
tests/integration/test_e2e.py::test_delete_nonexistent FAILED            [ 81%]
tests/integration/test_graph_store_integration.py::TestMemgraphGraphRepositoryIntegration::test_document_operations SKIPPED [ 82%]
tests/integration/test_graph_store_integration.py::TestMemgraphGraphRepositoryIntegration::test_entity_operations SKIPPED [ 82%]
tests/integration/test_graph_store_integration.py::TestMemgraphGraphRepositoryIntegration::test_bulk_operations SKIPPED [ 82%]
tests/integration/test_graph_store_integration.py::TestMemgraphGraphRepositoryIntegration::test_error_handling SKIPPED [ 83%]
tests/integration/test_ingest_command.py::test_process_and_store_document_cli_logic SKIPPED [ 83%]
tests/integration/test_ingest_command.py::test_ingest_single_file_success SKIPPED [ 84%]
tests/integration/test_ingest_command.py::test_ingest_directory_success SKIPPED [ 84%]
tests/integration/test_ingest_command.py::test_ingest_file_not_found SKIPPED [ 84%]
tests/integration/test_ingest_command.py::test_ingest_processing_error SKIPPED [ 85%]
tests/integration/test_ingest_command.py::test_ingest_repository_error SKIPPED [ 85%]
tests/integration/test_ingestion_integration.py::test_document_ingestion_pipeline SKIPPED [ 86%]
tests/integration/test_ingestion_integration.py::test_concurrent_ingestion_integration SKIPPED [ 86%]
tests/integration/test_ingestion_integration.py::test_large_document_ingestion_integration SKIPPED [ 87%]
tests/integration/test_ingestion_integration.py::test_error_handling_integration SKIPPED [ 87%]
tests/integration/test_query_pipeline.py::test_query_pipeline SKIPPED    [ 87%]
tests/integration/test_query_pipeline.py::test_basic_query FAILED        [ 88%]
tests/integration/test_query_pipeline.py::test_query_no_entities PASSED  [ 88%]
tests/integration/test_query_pipeline.py::test_query_invalid_request PASSED [ 89%]
tests/services/test_ingestion_service.py::test_ingest_document_creates_document PASSED [ 89%]
tests/services/test_ingestion_service.py::test_ingest_document_creates_chunks_with_embeddings PASSED [ 89%]
tests/services/test_ingestion_service.py::test_ingest_document_skips_embeddings PASSED [ 90%]
tests/services/test_ingestion_service.py::test_ingest_document_creates_relationships PASSED [ 90%]
tests/services/test_ingestion_service.py::test_ingest_document_returns_ingestion_result PASSED [ 91%]
tests/services/test_ingestion_service.py::test_ingest_handles_custom_chunk_size PASSED [ 91%]
tests/services/test_ingestion_service.py::test_ingest_document_no_embeddings PASSED [ 92%]
tests/services/test_ingestion_service.py::test_ingest_document_with_embeddings PASSED [ 92%]
tests/services/test_search_service.py::test_search_chunks_calls_repository PASSED [ 92%]
tests/services/test_search_service.py::test_search_chunks_returns_search_results PASSED [ 93%]
tests/services/test_search_service.py::test_search_chunks_handles_no_results PASSED [ 93%]
tests/services/test_search_service.py::test_search_chunks_similarity_calls_embedding_and_repo FAILED [ 94%]
tests/services/test_search_service.py::test_search_chunks_similarity_returns_results FAILED [ 94%]
tests/services/test_search_service.py::test_search_chunks_similarity_handles_no_results PASSED [ 94%]
tests/test_graph_repository.py::test_save_and_retrieve_document SKIPPED  [ 95%]
tests/test_graph_repository.py::test_save_and_retrieve_chunk SKIPPED     [ 95%]
tests/test_graph_repository.py::test_create_relationship SKIPPED (Sk...) [ 96%]
tests/test_graph_repository.py::test_nonexistent_document SKIPPED (S...) [ 96%]
tests/test_graph_repository.py::test_nonexistent_chunks SKIPPED (Ski...) [ 97%]
tests/test_graph_repository.py::test_delete_document SKIPPED (Skippi...) [ 97%]
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_add_document SKIPPED [ 97%]
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_add_chunk SKIPPED [ 98%]
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_add_entity SKIPPED [ 98%]
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_add_relationship SKIPPED [ 99%]
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_get_neighbors_returns_entities SKIPPED [ 99%]
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_error_handling SKIPPED [100%]

=================================== FAILURES ===================================
__________________________ test_connection_management __________________________

memgraph_repo = <async_generator object memgraph_repo at 0x3445660e0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_connection_management(memgraph_repo: MemgraphRepository):
        """Test connection, closing, and implicit re-connection."""
        # 1. Test initial connection worked (implicitly checked by fixture setup)
        try:
>           memgraph_repo._execute_query_sync("RETURN 1")
E           AttributeError: 'async_generator' object has no attribute '_execute_query_sync'

tests/infrastructure/graph_stores/test_memgraph_store.py:58: AttributeError

During handling of the above exception, another exception occurred:

memgraph_repo = <async_generator object memgraph_repo at 0x3445660e0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_connection_management(memgraph_repo: MemgraphRepository):
        """Test connection, closing, and implicit re-connection."""
        # 1. Test initial connection worked (implicitly checked by fixture setup)
        try:
            memgraph_repo._execute_query_sync("RETURN 1")
            connected_initially = True
        except Exception as e:
            connected_initially = False
>           pytest.fail(f"Initial query execution failed: {e}")
E           Failed: Initial query execution failed: 'async_generator' object has no attribute '_execute_query_sync'

tests/infrastructure/graph_stores/test_memgraph_store.py:62: Failed
_____________________________ test_add_get_entity ______________________________

memgraph_repo = <async_generator object memgraph_repo at 0x344566320>
clean_db = <coroutine object clean_db at 0x34455f880>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_add_get_entity(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test adding and retrieving a simple Entity."""
        entity_id = str(uuid.uuid4())
        entity_props = {"name": "Test Entity", "value": 123}
        entity = Entity(id=entity_id, type="TestType", properties=entity_props)
    
>       await memgraph_repo.add_entity(entity)
E       AttributeError: 'async_generator' object has no attribute 'add_entity'

tests/infrastructure/graph_stores/test_memgraph_store.py:89: AttributeError
___________________________ test_document_as_entity ____________________________

memgraph_repo = <async_generator object memgraph_repo at 0x344566680>
clean_db = <coroutine object clean_db at 0x34455fd00>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_document_as_entity(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test adding and retrieving a Document using GraphStore entity methods."""
        doc_id = str(uuid.uuid4())
        doc_content = "This is the document content."
        doc_metadata = {"author": "Test Author", "source": "test.txt"}
    
        document_entity = Entity(
            id=doc_id,
            type="Document",
            properties={
                "content": doc_content,
                **doc_metadata
            }
        )
>       await memgraph_repo.add_entity(document_entity)
E       AttributeError: 'async_generator' object has no attribute 'add_entity'

tests/infrastructure/graph_stores/test_memgraph_store.py:116: AttributeError
_____________________________ test_chunk_as_entity _____________________________

memgraph_repo = <async_generator object memgraph_repo at 0x3445669e0>
clean_db = <coroutine object clean_db at 0x346670280>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_chunk_as_entity(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test adding and retrieving a Chunk using GraphStore entity methods and linking."""
        doc_id = str(uuid.uuid4())
        chunk_id = str(uuid.uuid4())
        chunk_content = "This is a text chunk."
        chunk_embedding = [0.1, 0.2, 0.3]
        chunk_metadata = {"position": 1, "doc_part": "abstract"}
    
        document_entity = Entity(id=doc_id, type="Document", properties={"content": "Parent doc", "source": "parent.txt"})
>       await memgraph_repo.add_entity(document_entity)
E       AttributeError: 'async_generator' object has no attribute 'add_entity'

tests/infrastructure/graph_stores/test_memgraph_store.py:159: AttributeError
_______________________ test_entity_interface_operations _______________________

memgraph_repo = <async_generator object memgraph_repo at 0x344566c20>
clean_db = <coroutine object clean_db at 0x346670ac0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_entity_interface_operations(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test GraphStore interface methods using Entity model."""
        entity1_id = str(uuid.uuid4())
        entity1_props = {"skill": "Python", "city": "Testville", "name": "Alice Entity"}
        entity1 = Entity(
            id=entity1_id,
            type="Person",
            properties=entity1_props
        )
>       await memgraph_repo.add_entity(entity1)
E       AttributeError: 'async_generator' object has no attribute 'add_entity'

tests/infrastructure/graph_stores/test_memgraph_store.py:219: AttributeError
_________________________ test_relationship_operations _________________________

memgraph_repo = <async_generator object memgraph_repo at 0x3445670a0>
clean_db = <coroutine object clean_db at 0x346671000>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_relationship_operations(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test relationship operations between entities using interface methods."""
        entity1_id = str(uuid.uuid4())
        entity1 = Entity(id=entity1_id, type="TestNode", properties={"name": "Entity 1"})
        entity2_id = str(uuid.uuid4())
        entity2 = Entity(id=entity2_id, type="TestNode", properties={"name": "Entity 2"})
    
>       await memgraph_repo.add_entity(entity1)
E       AttributeError: 'async_generator' object has no attribute 'add_entity'

tests/infrastructure/graph_stores/test_memgraph_store.py:293: AttributeError
_____________________________ test_bulk_operations _____________________________

memgraph_repo = <async_generator object memgraph_repo at 0x344567520>
clean_db = <coroutine object clean_db at 0x3466716c0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_bulk_operations(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test bulk adding entities and relationships using add_entities_and_relationships."""
        entity1_id = str(uuid.uuid4())
        entity2_id = str(uuid.uuid4())
        entity3_id = str(uuid.uuid4())
        entity1 = Entity(id=entity1_id, type="BulkNode", properties={"name": "Bulk Entity 1"})
        entity2 = Entity(id=entity2_id, type="BulkNode", properties={"name": "Bulk Entity 2", "value": 10})
        entity3 = Entity(id=entity3_id, type="AnotherBulkNode", properties={"name": "Bulk Entity 3"})
    
        entities = [entity1, entity2, entity3]
    
        rel1_id = str(uuid.uuid4())
        rel2_id = str(uuid.uuid4())
        relationships = [
            Relationship(id=rel1_id, source_id=entity1_id, target_id=entity2_id, type="LINKED"),
            Relationship(id=rel2_id, source_id=entity2_id, target_id=entity3_id, type="REFERENCES", properties={"strength": 10})
        ]
    
>       await memgraph_repo.add_entities_and_relationships(entities, relationships)
E       AttributeError: 'async_generator' object has no attribute 'add_entities_and_relationships'

tests/infrastructure/graph_stores/test_memgraph_store.py:358: AttributeError
_____________________________ test_error_handling ______________________________

memgraph_repo = <async_generator object memgraph_repo at 0x344567880>
clean_db = <coroutine object clean_db at 0x346671f00>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_error_handling(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test error handling for invalid operations (e.g., adding relationship with missing entity)."""
        entity1_id = str(uuid.uuid4())
        entity1 = Entity(id=entity1_id, type="ErrorNode", properties={"name": "Error Entity 1"})
>       await memgraph_repo.add_entity(entity1)
E       AttributeError: 'async_generator' object has no attribute 'add_entity'

tests/infrastructure/graph_stores/test_memgraph_store.py:382: AttributeError
___________________________ test_neighbor_operations ___________________________

memgraph_repo = <async_generator object memgraph_repo at 0x344567be0>
clean_db = <coroutine object clean_db at 0x3466728c0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_neighbor_operations(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test retrieving neighbors with different directions and types."""
        ent1_id = str(uuid.uuid4())
        ent2_id = str(uuid.uuid4())
        ent3_id = str(uuid.uuid4())
        ent1 = Entity(id=ent1_id, type="NeighborNode", properties={"name": "Center"})
        ent2 = Entity(id=ent2_id, type="NeighborNode", properties={"name": "Outgoing"})
        ent3 = Entity(id=ent3_id, type="AnotherNeighborNode", properties={"name": "Incoming/Outgoing"})
    
        rel_a_id = str(uuid.uuid4())
        rel_b_id = str(uuid.uuid4())
        rel_c_id = str(uuid.uuid4())
    
>       await memgraph_repo.add_entities_and_relationships(
            [ent1, ent2, ent3],
            [
                Relationship(id=rel_a_id, source_id=ent1_id, target_id=ent2_id, type="TYPE_A"),
                Relationship(id=rel_b_id, source_id=ent3_id, target_id=ent1_id, type="TYPE_B"),
                Relationship(id=rel_c_id, source_id=ent1_id, target_id=ent3_id, type="TYPE_C", properties={"weight": 5})
            ]
        )
E       AttributeError: 'async_generator' object has no attribute 'add_entities_and_relationships'

tests/infrastructure/graph_stores/test_memgraph_store.py:417: AttributeError
_____________________________ test_property_search _____________________________

memgraph_repo = <async_generator object memgraph_repo at 0x346688160>
clean_db = <coroutine object clean_db at 0x346673280>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_property_search(memgraph_repo: MemgraphRepository, clean_db: None):
        """Test searching entities by properties using search_entities_by_properties."""
        ent1_id = str(uuid.uuid4())
        ent2_id = str(uuid.uuid4())
        ent3_id = str(uuid.uuid4())
        ent4_id = str(uuid.uuid4())
        ent1 = Entity(id=ent1_id, type="Person", properties={"name": "Searchable Alice", "city": "Zurich", "status": "active", "age": 30})
        ent2 = Entity(id=ent2_id, type="Person", properties={"name": "Searchable Bob", "city": "London", "status": "active", "age": 35})
        ent3 = Entity(id=ent3_id, type="Person", properties={"name": "Inactive Charlie", "city": "Zurich", "status": "inactive", "age": 40})
        ent4 = Entity(id=ent4_id, type="Organization", properties={"name": "Searchable Corp", "city": "Zurich", "active_projects": 5})
    
>       await memgraph_repo.add_entities_and_relationships([ent1, ent2, ent3, ent4], [])
E       AttributeError: 'async_generator' object has no attribute 'add_entities_and_relationships'

tests/infrastructure/graph_stores/test_memgraph_store.py:477: AttributeError
________________________ test_ingest_and_keyword_search ________________________

test_client = <httpx.AsyncClient object at 0x3461238f0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_ingest_and_keyword_search(test_client: httpx.AsyncClient):
        """Verify ingestion and subsequent keyword search."""
        doc_content = "Integration testing involves blue widgets."
        metadata = {"source": "integration_test", "color": "blue"}
    
        # Ingest directly using test_client
        ingest_response = await test_client.post(
            f"{BASE_URL}/ingestion/document",
            json={"content": doc_content, "metadata": metadata, "generate_embeddings": True}
        )
>       assert ingest_response.status_code == status.HTTP_200_OK
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code
E        +  and   200 = status.HTTP_200_OK

tests/integration/test_e2e.py:84: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-04-16 11:02:05,930 - graph_rag.api.main - INFO - rid=59511546-2456-4279-8544-2380e7cfb831 path=/api/v1/ingestion/document method=POST
2025-04-16 11:02:05,931 - httpx - INFO - HTTP Request: POST http://localhost:8000/api/v1/ingestion/document "HTTP/1.1 404 Not Found"
------------------------------ Captured log call -------------------------------
INFO     graph_rag.api.main:main.py:315 rid=59511546-2456-4279-8544-2380e7cfb831 path=/api/v1/ingestion/document method=POST
INFO     httpx:_client.py:1740 HTTP Request: POST http://localhost:8000/api/v1/ingestion/document "HTTP/1.1 404 Not Found"
________________________ test_ingest_and_vector_search _________________________

test_client = <httpx.AsyncClient object at 0x346123b90>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_ingest_and_vector_search(test_client: httpx.AsyncClient):
        """Verify ingestion and subsequent vector similarity search."""
        doc_content = "Semantic search looks for meaning, like finding vehicles when asked about cars."
        metadata = {"source": "integration_test", "topic": "search"}
        query = "automobiles"
        limit = 3
    
        # Ingest directly using test_client
        ingest_response = await test_client.post(
            f"{BASE_URL}/ingestion/document",
            json={"content": doc_content, "metadata": metadata, "generate_embeddings": True}
        )
>       assert ingest_response.status_code == status.HTTP_200_OK
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code
E        +  and   200 = status.HTTP_200_OK

tests/integration/test_e2e.py:120: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-04-16 11:02:05,947 - graph_rag.api.main - INFO - rid=51b84b06-cdb7-4635-9b41-087258821fff path=/api/v1/ingestion/document method=POST
2025-04-16 11:02:05,947 - httpx - INFO - HTTP Request: POST http://localhost:8000/api/v1/ingestion/document "HTTP/1.1 404 Not Found"
------------------------------ Captured log call -------------------------------
INFO     graph_rag.api.main:main.py:315 rid=51b84b06-cdb7-4635-9b41-087258821fff path=/api/v1/ingestion/document method=POST
INFO     httpx:_client.py:1740 HTTP Request: POST http://localhost:8000/api/v1/ingestion/document "HTTP/1.1 404 Not Found"
_________________________ test_search_nonexistent_term _________________________

test_client = <httpx.AsyncClient object at 0x346177bc0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_search_nonexistent_term(test_client: httpx.AsyncClient):
        """Verify searches for unlikely terms return empty results."""
        query = "zzzyyyxxx_nonexistent_term_qwerty"
        limit = 5
    
        # Keyword Search directly using test_client
        keyword_response = await test_client.post(
            f"{BASE_URL}/search/chunks/keyword",
            json={"query": query, "limit": limit}
        )
>       assert keyword_response.status_code == status.HTTP_200_OK
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code
E        +  and   200 = status.HTTP_200_OK

tests/integration/test_e2e.py:153: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-04-16 11:02:05,962 - graph_rag.api.main - INFO - rid=e1137877-c0a7-459d-a573-bb507d4a2e39 path=/api/v1/search/chunks/keyword method=POST
2025-04-16 11:02:05,962 - httpx - INFO - HTTP Request: POST http://localhost:8000/api/v1/search/chunks/keyword "HTTP/1.1 404 Not Found"
------------------------------ Captured log call -------------------------------
INFO     graph_rag.api.main:main.py:315 rid=e1137877-c0a7-459d-a573-bb507d4a2e39 path=/api/v1/search/chunks/keyword method=POST
INFO     httpx:_client.py:1740 HTTP Request: POST http://localhost:8000/api/v1/search/chunks/keyword "HTTP/1.1 404 Not Found"
____________________________ test_ingest_and_delete ____________________________

test_client = <httpx.AsyncClient object at 0x3461804a0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_ingest_and_delete(test_client: httpx.AsyncClient):
        """Verify ingestion and subsequent deletion."""
        doc_content = "This document is created solely for deletion testing."
        metadata = {"source": "integration_test_delete"}
    
        # 1. Ingest directly using test_client
        ingest_response = await test_client.post(
            f"{BASE_URL}/ingestion/document",
            json={"content": doc_content, "metadata": metadata, "generate_embeddings": False} # No embedding needed
        )
>       assert ingest_response.status_code == status.HTTP_200_OK
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code
E        +  and   200 = status.HTTP_200_OK

tests/integration/test_e2e.py:180: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-04-16 11:02:05,977 - graph_rag.api.main - INFO - rid=e27cf5a4-1293-415a-a32e-5a5ce9d81a70 path=/api/v1/ingestion/document method=POST
2025-04-16 11:02:05,977 - httpx - INFO - HTTP Request: POST http://localhost:8000/api/v1/ingestion/document "HTTP/1.1 404 Not Found"
------------------------------ Captured log call -------------------------------
INFO     graph_rag.api.main:main.py:315 rid=e27cf5a4-1293-415a-a32e-5a5ce9d81a70 path=/api/v1/ingestion/document method=POST
INFO     httpx:_client.py:1740 HTTP Request: POST http://localhost:8000/api/v1/ingestion/document "HTTP/1.1 404 Not Found"
___________________________ test_delete_nonexistent ____________________________

test_client = <httpx.AsyncClient object at 0x3461109e0>

    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_delete_nonexistent(test_client: httpx.AsyncClient):
        """Test deleting a non-existent document ID."""
        non_existent_id = f"non-existent-id-{uuid.uuid4()}"
        delete_response = await test_client.delete(f"{BASE_URL}/documents/{non_existent_id}") # Adjust endpoint if needed
>       assert delete_response.status_code == status.HTTP_404_NOT_FOUND
E       assert 500 == 404
E        +  where 500 = <Response [500 Internal Server Error]>.status_code
E        +  and   404 = status.HTTP_404_NOT_FOUND

tests/integration/test_e2e.py:213: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-04-16 11:02:05,992 - graph_rag.api.main - INFO - rid=92fb0062-d2be-4ebd-a865-4e34c48c153e path=/api/v1/documents/non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83 method=DELETE
2025-04-16 11:02:05,993 - graph_rag.api.routers.documents - INFO - Attempting to delete document non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83 and its chunks.
2025-04-16 11:02:05,993 - graph_rag.api.routers.documents - ERROR - API Error: Failed to delete document non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83. Error: DB error
Traceback (most recent call last):
  File "/Users/bogdan/til/graph-rag-mcp/graph_rag/api/routers/documents.py", line 128, in delete_document
    deleted = await repo.delete_document(document_id)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bogdan/.pyenv/versions/3.12.7/lib/python3.12/unittest/mock.py", line 2282, in _execute_mock_call
    raise effect
  File "/Users/bogdan/til/graph-rag-mcp/graph_rag/api/routers/documents.py", line 128, in delete_document
    deleted = await repo.delete_document(document_id)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bogdan/.pyenv/versions/3.12.7/lib/python3.12/unittest/mock.py", line 2282, in _execute_mock_call
    raise effect
Exception: DB error
2025-04-16 11:02:05,993 - graph_rag.api.main - WARNING - HTTP exception for http://localhost:8000/api/v1/documents/non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83: 500 - Failed to delete document non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83. Check logs for details.
2025-04-16 11:02:05,993 - httpx - INFO - HTTP Request: DELETE http://localhost:8000/api/v1/documents/non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83 "HTTP/1.1 500 Internal Server Error"
------------------------------ Captured log call -------------------------------
INFO     graph_rag.api.main:main.py:315 rid=92fb0062-d2be-4ebd-a865-4e34c48c153e path=/api/v1/documents/non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83 method=DELETE
INFO     graph_rag.api.routers.documents:documents.py:126 Attempting to delete document non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83 and its chunks.
ERROR    graph_rag.api.routers.documents:documents.py:146 API Error: Failed to delete document non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83. Error: DB error
Traceback (most recent call last):
  File "/Users/bogdan/til/graph-rag-mcp/graph_rag/api/routers/documents.py", line 128, in delete_document
    deleted = await repo.delete_document(document_id)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bogdan/.pyenv/versions/3.12.7/lib/python3.12/unittest/mock.py", line 2282, in _execute_mock_call
    raise effect
  File "/Users/bogdan/til/graph-rag-mcp/graph_rag/api/routers/documents.py", line 128, in delete_document
    deleted = await repo.delete_document(document_id)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/bogdan/.pyenv/versions/3.12.7/lib/python3.12/unittest/mock.py", line 2282, in _execute_mock_call
    raise effect
Exception: DB error
WARNING  graph_rag.api.main:main.py:328 HTTP exception for http://localhost:8000/api/v1/documents/non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83: 500 - Failed to delete document non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83. Check logs for details.
INFO     httpx:_client.py:1740 HTTP Request: DELETE http://localhost:8000/api/v1/documents/non-existent-id-62c42016-a911-4faa-bd77-50a00e383e83 "HTTP/1.1 500 Internal Server Error"
_______________________________ test_basic_query _______________________________

test_client = <httpx.AsyncClient object at 0x3460f22a0>

    @pytest.mark.asyncio
    async def test_basic_query(test_client: AsyncClient):
        """
        Test the basic query endpoint.
        1. Ingest a known document.
        2. Query for information related to the document.
        3. Assert the response contains relevant context (e.g., chunk content).
        """
        # 1. Ingest a known document
        doc_content = "The Eiffel Tower is located in Paris, the capital of France."
        metadata = {"source": "query-test-basic"}
        try:
            # Use the local helper or inline the call
            doc_id = await ingest_doc_helper(test_client, doc_content, metadata)
            # doc_id = await ingest_test_document(test_client, doc_content, metadata) # If using imported helper
            logger.info(f"Ingested document {doc_id} for query test.")
        except Exception as e:
            pytest.fail(f"Failed to ingest test document: {e}")
    
        # 2. Query for information
        query_text = "Where is the Eiffel Tower?"
        response = await test_client.post(
            "/api/v1/query",
            json={
                "query_text": query_text,
                "k": 5
            }
        )
    
        # 3. Assertions
        assert response.status_code == status.HTTP_200_OK
        response_data = response.json()
        logger.debug(f"Query Response Data: {response_data}")
    
>       assert "query_text" in response_data
E       AssertionError: assert 'query_text' in {'answer': 'Could not find relevant information based on entities.', 'graph_context': None, 'metadata': {'source': 'mock_engine_no_entities'}, 'relevant_chunks': []}

tests/integration/test_query_pipeline.py:169: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-04-16 11:02:06,013 - graph_rag.api.main - INFO - rid=14b776aa-7737-4057-ab76-709a12629039 path=/api/v1/ingestion/documents method=POST
2025-04-16 11:02:06,014 - graph_rag.api.routers.ingestion - INFO - [Req ID: 5237967a-4fb8-4b17-a199-38a940c71667] Received ingestion request.
2025-04-16 11:02:06,014 - graph_rag.api.routers.ingestion - INFO - Document doc-7ee159e3-4b7c-4852-89aa-ee210567cd5f processed successfully.
2025-04-16 11:02:06,014 - httpx - INFO - HTTP Request: POST http://test/api/v1/ingestion/documents "HTTP/1.1 202 Accepted"
2025-04-16 11:02:06,014 - test_query_pipeline - INFO - Ingested document doc-7ee159e3-4b7c-4852-89aa-ee210567cd5f for query test.
2025-04-16 11:02:06,014 - graph_rag.api.main - INFO - rid=2655507f-774e-4126-96fc-86e6000d40f5 path=/api/v1/query method=POST
2025-04-16 11:02:06,015 - graph_rag.api.routers.query - INFO - Received query: Where is the Eiffel Tower?... (k=5)
2025-04-16 11:02:06,015 - graph_rag.api.routers.query - INFO - Query successful. Found 0 chunks.
2025-04-16 11:02:06,015 - httpx - INFO - HTTP Request: POST http://test/api/v1/query "HTTP/1.1 200 OK"
------------------------------ Captured log call -------------------------------
INFO     graph_rag.api.main:main.py:315 rid=14b776aa-7737-4057-ab76-709a12629039 path=/api/v1/ingestion/documents method=POST
INFO     graph_rag.api.routers.ingestion:ingestion.py:62 [Req ID: 5237967a-4fb8-4b17-a199-38a940c71667] Received ingestion request.
INFO     graph_rag.api.routers.ingestion:ingestion.py:33 Document doc-7ee159e3-4b7c-4852-89aa-ee210567cd5f processed successfully.
INFO     httpx:_client.py:1740 HTTP Request: POST http://test/api/v1/ingestion/documents "HTTP/1.1 202 Accepted"
INFO     test_query_pipeline:test_query_pipeline.py:150 Ingested document doc-7ee159e3-4b7c-4852-89aa-ee210567cd5f for query test.
INFO     graph_rag.api.main:main.py:315 rid=2655507f-774e-4126-96fc-86e6000d40f5 path=/api/v1/query method=POST
INFO     graph_rag.api.routers.query:query.py:29 Received query: Where is the Eiffel Tower?... (k=5)
INFO     graph_rag.api.routers.query:query.py:33 Query successful. Found 0 chunks.
INFO     httpx:_client.py:1740 HTTP Request: POST http://test/api/v1/query "HTTP/1.1 200 OK"
____________ test_search_chunks_similarity_calls_embedding_and_repo ____________

self = <MagicMock name='EmbeddingService().encode' id='14063830896'>
args = ('find similar apples',), kwargs = {}
msg = "Expected 'encode' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'encode' to be called once. Called 0 times.

../../.pyenv/versions/3.12.7/lib/python3.12/unittest/mock.py:960: AssertionError

During handling of the above exception, another exception occurred:

mock_graph_repository_with_search = <AsyncMock id='14063842800'>
mock_embedding_service_for_search = <MagicMock name='EmbeddingService()' id='14063807968'>

    @pytest.mark.asyncio
    async def test_search_chunks_similarity_calls_embedding_and_repo(mock_graph_repository_with_search, mock_embedding_service_for_search):
        """Test similarity search calls embedding service and repo method."""
        service = SearchService(mock_graph_repository_with_search)
        query = "find similar apples"
        limit = 5
    
        await service.search_chunks_by_similarity(query, limit)
    
>       mock_embedding_service_for_search.encode.assert_called_once_with(query)
E       AssertionError: Expected 'encode' to be called once. Called 0 times.

tests/services/test_search_service.py:77: AssertionError
________________ test_search_chunks_similarity_returns_results _________________

mock_graph_repository_with_search = <AsyncMock id='14063762128'>

    @pytest.mark.asyncio
    async def test_search_chunks_similarity_returns_results(mock_graph_repository_with_search):
        """Test similarity search returns correctly mapped results with scores."""
        service = SearchService(mock_graph_repository_with_search)
        query = "find similar apples"
    
        results = await service.search_chunks_by_similarity(query)
    
>       assert len(results) == len(SAMPLE_CHUNKS_SIMILARITY)
E       AssertionError: assert 0 == 2
E        +  where 0 = len([])
E        +  and   2 = len([(Chunk(id='chunk1', type='Chunk', properties={}, created_at=None, updated_at=None, content='Apples are red.', document_id='doc1', embedding=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0... 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]), 0.85)])

tests/services/test_search_service.py:91: AssertionError
=============================== warnings summary ===============================
tests/core/test_debug_tools.py:94
  /Users/bogdan/til/graph-rag-mcp/tests/core/test_debug_tools.py:94: PytestRemovedIn9Warning: Marks applied to fixtures have no effect
  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function
    @pytest.mark.integration

tests/core/test_senior_debug_protocol.py::test_observe_failure
tests/core/test_senior_debug_protocol.py::test_analyze_test_case
tests/core/test_senior_debug_protocol.py::test_question_assumptions
tests/core/test_senior_debug_protocol.py::test_trace_execution_path
tests/core/test_senior_debug_protocol.py::test_create_investigation
tests/core/test_senior_debug_protocol.py::test_generate_hypotheses
tests/core/test_senior_debug_protocol.py::test_resolve_issue
tests/core/test_senior_debug_protocol.py::test_save_and_load_investigation
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pydantic/main.py:253: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)

tests/core/test_senior_debug_protocol.py::test_observe_failure
  /Users/bogdan/til/graph-rag-mcp/tests/core/test_senior_debug_protocol.py:45: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    assert failure.timestamp <= datetime.utcnow()

tests/core/test_senior_debug_protocol.py::test_verify_hypothesis
tests/core/test_senior_debug_protocol.py::test_verify_hypothesis
  /Users/bogdan/til/graph-rag-mcp/graph_rag/core/senior_debug_protocol.py:237: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    "timestamp": datetime.utcnow()

tests/core/test_senior_debug_protocol.py::test_resolve_issue
  /Users/bogdan/til/graph-rag-mcp/graph_rag/core/senior_debug_protocol.py:246: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    "timestamp": datetime.utcnow(),

tests/core/test_senior_debug_protocol.py::test_save_and_load_investigation
  /Users/bogdan/til/graph-rag-mcp/graph_rag/core/senior_debug_protocol.py:259: PydanticDeprecatedSince20: The `parse_raw` method is deprecated; if your data is JSON use `model_validate_json`, otherwise load the data then use `model_validate` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    return Investigation.parse_raw(f.read())

tests/core/test_senior_debug_protocol.py::test_save_and_load_investigation
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pydantic/main.py:1364: PydanticDeprecatedSince20: `load_str_bytes` is deprecated. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    obj = parse.load_str_bytes(

tests/data_stores/test_memgraph_store.py::test_unit_add_relationship
  /Users/bogdan/.pyenv/versions/3.12.7/lib/python3.12/unittest/mock.py:2208: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    def __init__(self, name, parent):
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/infrastructure/graph_stores/test_memgraph_store.py::test_connection_management
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_connection_management' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_add_get_entity
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_add_get_entity' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_add_get_entity
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_add_get_entity' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_document_as_entity
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_document_as_entity' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_document_as_entity
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_document_as_entity' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_chunk_as_entity
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_chunk_as_entity' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_chunk_as_entity
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_chunk_as_entity' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_entity_interface_operations
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_entity_interface_operations' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_entity_interface_operations
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_entity_interface_operations' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_relationship_operations
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_relationship_operations' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_relationship_operations
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_relationship_operations' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_bulk_operations
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_bulk_operations' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_bulk_operations
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_bulk_operations' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_error_handling
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_error_handling' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_error_handling
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_error_handling' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_neighbor_operations
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_neighbor_operations' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_neighbor_operations
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_neighbor_operations' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_property_search
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_property_search' requested async @pytest.fixture 'memgraph_repo' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/infrastructure/graph_stores/test_memgraph_store.py::test_property_search
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:1019: PytestDeprecationWarning: asyncio test 'test_property_search' requested async @pytest.fixture 'clean_db' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of flake8-asyncio.
    warnings.warn(

tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_add_document
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_add_chunk
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_add_entity
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_add_relationship
tests/unit/test_graph_store.py::TestMemgraphGraphRepository::test_error_handling
  /Users/bogdan/til/graph-rag-mcp/.venv/lib/python3.12/site-packages/_pytest/python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_connection_management
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_add_get_entity
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_document_as_entity
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_chunk_as_entity
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_entity_interface_operations
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_relationship_operations
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_bulk_operations
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_error_handling
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_neighbor_operations
FAILED tests/infrastructure/graph_stores/test_memgraph_store.py::test_property_search
FAILED tests/integration/test_e2e.py::test_ingest_and_keyword_search - assert...
FAILED tests/integration/test_e2e.py::test_ingest_and_vector_search - assert ...
FAILED tests/integration/test_e2e.py::test_search_nonexistent_term - assert 4...
FAILED tests/integration/test_e2e.py::test_ingest_and_delete - assert 404 == 200
FAILED tests/integration/test_e2e.py::test_delete_nonexistent - assert 500 ==...
FAILED tests/integration/test_query_pipeline.py::test_basic_query - Assertion...
FAILED tests/services/test_search_service.py::test_search_chunks_similarity_calls_embedding_and_repo
FAILED tests/services/test_search_service.py::test_search_chunks_similarity_returns_results
=========== 18 failed, 121 passed, 101 skipped, 40 warnings in 2.25s ===========
