[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "techlead-autopilot"
version = "0.1.0"
description = "Technical Leadership Automation Platform - Transform expertise into systematic business growth"
authors = [{name = "TechLead AutoPilot", email = "hello@techleadautopilot.com"}]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # FastAPI and Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database and ORM
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "redis>=5.0.0",     # Caching and session storage
    
    # Authentication and Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # LinkedIn and Social Media APIs
    "requests>=2.31.0",
    "httpx>=0.25.0",
    "oauthlib>=3.2.2",
    
    # Content Generation and NLP
    "openai>=1.3.0",
    "anthropic>=0.8.0",
    "spacy>=3.7.0",
    "textblob>=0.17.1",
    
    # Billing and Payments
    "stripe>=7.0.0",
    
    # Analytics and Monitoring
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "croniter>=2.0.0",
    "celery>=5.3.0",
    "boto3>=1.34.0",  # AWS services
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For testing FastAPI
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://techleadautopilot.com"
Repository = "https://github.com/techleadautopilot/platform"
Documentation = "https://docs.techleadautopilot.com"

[project.scripts]
techlead-autopilot = "techlead_autopilot.cli.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/techlead_autopilot"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["E501"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "spacy.*",
    "textblob.*",
    "croniter.*",
    "celery.*",
    "stripe.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring external services",
    "slow: Slow running tests",
    "auth: Authentication related tests",
    "content: Content generation tests", 
    "linkedin: LinkedIn integration tests",
    "billing: Billing and subscription tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]