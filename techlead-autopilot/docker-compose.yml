version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: techlead_postgres
    environment:
      POSTGRES_DB: techlead_autopilot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: techlead_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TechLead AutoPilot API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: techlead_api
    environment:
      # Database
      TECHLEAD_DATABASE_URL: postgresql://postgres:postgres@postgres:5432/techlead_autopilot
      
      # Redis
      TECHLEAD_REDIS_URL: redis://redis:6379/0
      
      # API Configuration
      TECHLEAD_ENVIRONMENT: development
      TECHLEAD_API_HOST: 0.0.0.0
      TECHLEAD_API_PORT: 8000
      TECHLEAD_DEBUG: "true"
      TECHLEAD_LOG_LEVEL: DEBUG
      
      # Security
      TECHLEAD_JWT_SECRET_KEY: dev-secret-key-change-in-production
      TECHLEAD_JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      TECHLEAD_JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # External APIs (development keys)
      TECHLEAD_LINKEDIN_CLIENT_ID: ""
      TECHLEAD_LINKEDIN_CLIENT_SECRET: ""
      TECHLEAD_OPENAI_API_KEY: ""
      TECHLEAD_STRIPE_SECRET_KEY: ""
      TECHLEAD_STRIPE_WEBHOOK_SECRET: ""
      
      # Features
      TECHLEAD_ENABLE_RATE_LIMITING: "true"
      TECHLEAD_ENABLE_ANALYTICS: "true"
      TECHLEAD_ENABLE_CACHING: "true"
      
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/.venv  # Exclude virtual environment from bind mount
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        # Wait for dependencies
        echo 'Waiting for database...' &&
        
        # Run database migrations
        uv run alembic upgrade head &&
        
        # Start API server with hot reload
        uv run uvicorn techlead_autopilot.api.main:create_app --factory --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development Database Admin Interface
  adminer:
    image: adminer:4.8.1
    container_name: techlead_adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: techlead_network