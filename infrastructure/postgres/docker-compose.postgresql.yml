version: '3.8'

networks:
  postgres-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  postgres_primary_data:
    driver: local
  postgres_standby_data:
    driver: local
  postgres_wal_archive:
    driver: local
  postgres_backups:
    driver: local
  pgbouncer_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # PostgreSQL Primary Server - Core Business Database
  postgres-primary:
    image: postgres:16
    container_name: postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: synapse_core
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_secure_2024}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-repl_secure_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - postgres_wal_archive:/var/lib/postgresql/wal-archive
      - ./config/postgresql/primary:/etc/postgresql
      - ./config/postgresql/initdb:/docker-entrypoint-initdb.d
      - ./scripts:/scripts
    command: |
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL Standby Server for High Availability
  postgres-standby:
    image: postgres:16
    container_name: postgres-standby
    restart: unless-stopped
    environment:
      POSTGRES_DB: synapse_core
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_secure_2024}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-repl_secure_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
      PGUSER: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_standby_data:/var/lib/postgresql/data
      - postgres_wal_archive:/var/lib/postgresql/wal-archive
      - ./config/postgresql/standby:/etc/postgresql
      - ./scripts:/scripts
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: |
      bash -c "
      until pg_isready -h postgres-primary -p 5432 -U postgres; do
        echo 'Waiting for primary to be ready...'
        sleep 2
      done
      
      echo 'Setting up standby server...'
      rm -rf /var/lib/postgresql/data/pgdata/*
      PGPASSWORD=${POSTGRES_REPLICATION_PASSWORD:-repl_secure_2024} pg_basebackup -h postgres-primary -D /var/lib/postgresql/data/pgdata -U replicator -v -P -W -R
      
      postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
      "
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # Analytics Database (separate instance for analytics workloads)
  postgres-analytics:
    image: postgres:16
    container_name: postgres-analytics
    restart: unless-stopped
    environment:
      POSTGRES_DB: synapse_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_secure_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"
    volumes:
      - ./volumes/postgres-analytics:/var/lib/postgresql/data
      - ./config/postgresql/analytics:/etc/postgresql
      - ./config/postgresql/initdb-analytics:/docker-entrypoint-initdb.d
    command: |
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Revenue Intelligence Database
  postgres-revenue:
    image: postgres:16
    container_name: postgres-revenue
    restart: unless-stopped
    environment:
      POSTGRES_DB: synapse_revenue
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_secure_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5435:5432"
    volumes:
      - ./volumes/postgres-revenue:/var/lib/postgresql/data
      - ./config/postgresql/revenue:/etc/postgresql
      - ./config/postgresql/initdb-revenue:/docker-entrypoint-initdb.d
    command: |
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: pgbouncer
    restart: unless-stopped
    ports:
      - "6432:5432"  # Core Business (30 connections)
      - "6433:5433"  # Analytics (25 connections)
      - "6434:5434"  # Revenue Intelligence (20 connections)
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: postgres
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_secure_2024}
      DATABASES_DBNAME: synapse_core
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 200
      DEFAULT_POOL_SIZE: 30
      SERVER_LIFETIME: 3600
      SERVER_IDLE_TIMEOUT: 600
    volumes:
      - ./config/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./config/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-analytics:
        condition: service_healthy
      postgres-revenue:
        condition: service_healthy
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "psql -h localhost -p 5432 -U postgres -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backup and Recovery Service
  postgres-backup:
    image: postgres:16
    container_name: postgres-backup
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-synapse_secure_2024}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: 30
    volumes:
      - postgres_backups:/backups
      - postgres_wal_archive:/var/lib/postgresql/wal-archive
      - ./scripts/backup:/scripts
    depends_on:
      postgres-primary:
        condition: service_healthy
    command: |
      bash -c "
      echo 'Installing cron and backup tools...'
      apt-get update && apt-get install -y cron
      
      echo 'Setting up backup cron job...'
      echo '0 2 * * * /scripts/backup.sh' | crontab -
      
      echo 'Starting cron daemon...'
      cron -f
      "
    networks:
      - postgres-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - postgres-network
      - monitoring-network

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD:-synapse_secure_2024}@postgres-primary:5432/synapse_core?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - postgres-network
      - monitoring-network

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring-network

  # HAProxy for Load Balancing and Failover
  haproxy:
    image: haproxy:2.8
    container_name: haproxy
    restart: unless-stopped
    ports:
      - "5000:5000"  # Load balanced PostgreSQL
      - "8080:8080"  # HAProxy Stats
    volumes:
      - ./config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-standby:
        condition: service_healthy
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/stats || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis for Session and Cache Management
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 3